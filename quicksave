#!/usr/bin/env ruby
require 'date'

class Quicksave
  BASE_DIR = '/.snapshots'.freeze
  MAX_AGE  = 90 # days

  class Snapshot
    attr_reader :partition, :date, :count

    def initialize(partition, date, count)
      @partition = partition
      @date      = date
      @count     = count
    end

    def expired?
      date < Date.today - Quicksave::MAX_AGE
    end

    def to_s
      to_path
    end

    def to_path
      @to_path ||= "#{Quicksave::BASE_DIR}/#{partition}-#{date}.#{count}"
    end

    def self.from_path(path)
      regex = /^(?<partition>[a-z_]+)-(?<date>\d{4}-\d{2}-\d{2})\.(?<count>\d+)$/
      m = path.split('/').last.match(regex)

      new(m[:partition].to_sym, Date.parse(m[:date]), m[:count].to_i)
    end
  end

  def snapshot(target)
    target  = target.to_sym
    mount   = snapshot_mount(target)
    current = next_snapshot(target)

    exec "btrfs subvolume snapshot -r #{mount} #{current}"
  end

  def cleanup(target)
    target = target.to_sym
    deleted = 0

    deleted += cleanup_dupes(target)
    deleted += cleanup_old(target)

    puts 'cleanup complete'
    puts "snapshots deleted: #{deleted}"
  end

  private

  def next_snapshot(target)
    count  = 0
    today  = Date.today

    previous = snapshots.find { |snap| snap.date == today && snap.partition == target }
    count    = previous.count + 1 if previous

    Snapshot.new(target, today, count)
  end

  def snapshots
    Dir["#{BASE_DIR}/*"]
      .map { |path| Snapshot.from_path(path) }
      .sort_by { |snap| [snap.partition, snap.date, snap.count] }
      .reverse
  end

  def cleanup_dupes(target)
    snaps = snapshots.select { |snap| snap.partition == target }

    # snapshots are now sorted, newest first
    today = Date.today
    seen  = []
    today_count = 0
    days_count  = 0
    del_count   = 0

    snaps.each do |snap|
      if snap.date == today
        today_count += 1
      elsif seen.include?(snap.date)
        del_count += 1
        `btrfs subvolume delete #{snap}`
      else
        seen.push(snap.date)
        days_count += 1
      end
    end

    del_count
  end

  def cleanup_old(target)
    snapshots
      .select { |snap| snap.partition == target && snap.expired? }
      .each { |snap| `btrfs subvolume delete #{snap}` }
      .count
  end

  def snapshot_mount(target)
    case target
    when :home then '/home'
    when :root then '/'
    else raise ArgumentError
    end
  end
end

def usage
  puts 'Usage: sudo quicksave <snapshot|cleanup> <root|home>'
  exit(1)
end

usage unless ARGV.length >= 2
action = ARGV.shift.downcase.to_sym

usage unless [:snapshot, :cleanup].include?(action)
usage unless Process.uid.zero?

Quicksave.new.send(action, *ARGV)
